import React from 'react'
import { View, Alert } from 'react-native'
import PracticeVS_AI from './index'
import { ChessGameAIState } from '@/hooks/useChessGameAI'

// V√≠ d·ª• v·ªÅ c√°ch s·ª≠ d·ª•ng PracticeVS_AI component v·ªõi k·ªãch b·∫£n 3

export default function PracticeVSAIExample() {
  // Handler khi game k·∫øt th√∫c
  const handleGameEnd = (result: string, status: ChessGameAIState['status']) => {
    console.log('Game ended:', result, status)

    // C√≥ th·ªÉ th√™m analytics ho·∫∑c l∆∞u k·∫øt qu·∫£
    // Analytics.track('chess_game_end', { result, status })

    // Show celebration cho victory
    if (result.includes('You win')) {
      setTimeout(() => {
        Alert.alert('üéâ Ch√∫c m·ª´ng!', 'B·∫°n ƒë√£ th·∫Øng AI! H√£y th·ª≠ ƒë·ªô kh√≥ cao h∆°n.', [
          { text: 'OK', style: 'default' },
        ])
      }, 500)
    }
  }

  // Handler khi c√≥ l·ªói
  const handleError = (error: string) => {
    console.error('Chess game error:', error)
    Alert.alert('L·ªói', error)
  }

  return (
    <View className="flex-1">
      {/* K·ªãch b·∫£n 1: Game b√¨nh th∆∞·ªùng t·ª´ starting position */}
      <PracticeVS_AI initialDifficulty="medium" onGameEnd={handleGameEnd} onError={handleError} />

      {/* 
      K·ªãch b·∫£n 2: Tactical puzzle - Mate in 2
      <PracticeVS_AI
        initialFen="2rq1rk1/pp3pp1/2n1bn1p/2pp4/3P4/P1P1BN2/1PQ2PPP/R3R1K1 w - - 0 1"
        initialDifficulty="hard"
        onGameEnd={handleGameEnd}
        onError={handleError}
      />
      */}

      {/*
      K·ªãch b·∫£n 3: Endgame practice - King and Queen vs King
      <PracticeVS_AI
        initialFen="8/8/8/4k3/8/8/4K3/4Q3 w - - 0 1"
        initialDifficulty="expert"
        onGameEnd={handleGameEnd}
        onError={handleError}
      />
      */}
    </View>
  )
}

// C√°c k·ªãch b·∫£n practice kh√°c nhau:

/* 
// 1. OPENING PRACTICE - Scholar's Mate Defense
const openingPractice = {
  fen: "rnbqkbnr/pppp1ppp/8/4p3/2B1P3/8/PPPP1PPP/RNBQK1NR w KQkq - 0 1",
  description: "Ph√≤ng th·ªß Scholar's Mate - AI s·∫Ω c·ªë g·∫Øng Scholar's Mate, b·∫°n ph·∫£i ph√≤ng th·ªß"
}

// 2. TACTICAL PUZZLE - Fork
const tacticalFork = {
  fen: "r1bqkb1r/pppp1ppp/2n2n2/4p3/2B1P3/3P1N2/PPP2PPP/RNBQK2R w KQkq - 0 1",
  description: "T√¨m c√°ch t·∫°o fork v·ªõi qu√¢n m√£"
}

// 3. ENDGAME - Rook vs Pawns
const rookEndgame = {
  fen: "8/6k1/6p1/6P1/8/6K1/r7/8 b - - 0 1",
  description: "Endgame xe ch·ªëng t·ªët - h·ªçc c√°ch d√πng xe trong endgame"
}

// 4. MIDDLE GAME - King Safety
const kingSafety = {
  fen: "r1bqk2r/pppp1ppp/2n2n2/2b1p3/2B1P3/3P1N2/PPP2PPP/RNBQK2R w KQkq - 0 1",
  description: "Nh·∫≠p th√†nh an to√†n cho vua tr∆∞·ªõc khi t·∫•n c√¥ng"
}

// 5. ADVANCED TACTICS - Pin and Skewer
const advancedTactics = {
  fen: "r1bq1rk1/ppp2ppp/2np1n2/2b1p3/2B1P3/3P1N2/PPP1NPPP/R1BQK2R w KQ - 0 1",
  description: "T√¨m c√°c tactics cao c·∫•p: pin, skewer, discovered attack"
}
*/

// C√°ch s·ª≠ d·ª•ng trong routing/navigation:

/*
// App.tsx ho·∫∑c navigation file
import PracticeVSAIExample from '@/components/PracticeVS_AI/example'

// Stack Navigation
<Stack.Screen 
  name="PracticeAI" 
  component={PracticeVSAIExample}
  options={{ title: 'Th·ª±c h√†nh v·ªõi AI' }}
/>

// Tab Navigation
<Tab.Screen
  name="Practice"
  component={PracticeVSAIExample}
  options={{
    tabBarLabel: 'Th·ª±c h√†nh',
    tabBarIcon: ({ color }) => <ChessIcon color={color} />
  }}
/>
*/

// T√≠ch h·ª£p v·ªõi Learning System:

/*
// LearningMenu.tsx
const practiceOptions = [
  {
    id: 'beginner',
    title: 'Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
    difficulty: 'easy' as AIDifficulty,
    description: 'AI ch∆°i ƒë∆°n gi·∫£n, t·∫≠p trung v√†o n∆∞·ªõc ƒëi c∆° b·∫£n'
  },
  {
    id: 'intermediate', 
    title: 'Trung b√¨nh',
    difficulty: 'medium' as AIDifficulty,
    description: 'AI c√≥ chi·∫øn thu·∫≠t, th·ª≠ th√°ch h∆°n'
  },
  {
    id: 'advanced',
    title: 'N√¢ng cao', 
    difficulty: 'hard' as AIDifficulty,
    description: 'AI m·∫°nh, y√™u c·∫ßu k·ªπ nƒÉng t·ªët'
  },
  {
    id: 'expert',
    title: 'Chuy√™n gia',
    difficulty: 'expert' as AIDifficulty, 
    description: 'AI r·∫•t m·∫°nh, th√°ch th·ª©c cao nh·∫•t'
  }
]

const handleSelectPractice = (option) => {
  navigation.navigate('PracticeAI', { 
    difficulty: option.difficulty,
    title: option.title 
  })
}
*/

// Analytics v√† Progress Tracking:

/*
// Trong onGameEnd callback
const trackGameResult = (result: string, status: string) => {
  const gameData = {
    result,
    status,
    difficulty: currentDifficulty,
    moveCount: moveHistory.length,
    duration: Date.now() - gameStartTime,
    playerColor: 'white',
    gameType: 'practice_vs_ai'
  }
  
  // Save to local storage
  AsyncStorage.setItem(
    `game_${Date.now()}`, 
    JSON.stringify(gameData)
  )
  
  // Send to analytics
  Analytics.track('chess_practice_complete', gameData)
  
  // Update player stats
  updatePlayerStats(gameData)
}
*/
